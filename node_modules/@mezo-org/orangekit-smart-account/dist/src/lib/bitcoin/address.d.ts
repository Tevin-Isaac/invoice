import { ByteArray, Hex } from "viem";
export declare class UnsupportedBitcoinAddressError extends Error {
    constructor();
}
declare function toNestedSegwitAddress(compressedPublicKey: string | ByteArray, isTestnet?: boolean): string;
/**
 * Checks if the Bitcoin address is really nested segwit (`P2SH-P2WPKH`).
 * @param bitcoinAddress Bitcoin address to check.
 * @param publicKey Public key of the bitcoin address.
 * @returns True if the address is nested segwit address (`P2SH-P2WPKH`),
 *          otherwise false.
 */
declare function isNestedSegwitAddress(bitcoinAddress: string, publicKey?: string): boolean | "" | undefined;
declare function recoverTruncatedBitcoinAddress(bitcoinAddress: string, publicKey?: string): Hex;
declare function isP2WPKHAddress(bitcoinAddress: string): boolean;
declare function isP2PKHAddress(bitcoinAddress: string): boolean;
declare function isMainnetAddress(bitcoinAddress: string): boolean;
declare function isTestnetAddress(bitcoinAddress: string): boolean;
declare const _default: {
    toNestedSegwitAddress: typeof toNestedSegwitAddress;
    recoverTruncatedBitcoinAddress: typeof recoverTruncatedBitcoinAddress;
    isP2WPKHAddress: typeof isP2WPKHAddress;
    isP2PKHAddress: typeof isP2PKHAddress;
    isNestedSegwitAddress: typeof isNestedSegwitAddress;
    isMainnetAddress: typeof isMainnetAddress;
    isTestnetAddress: typeof isTestnetAddress;
};
export default _default;
//# sourceMappingURL=address.d.ts.map