import { orangeKitSafeFactoryConfig } from "@mezo-org/orangekit-contracts";
import { encodeFunctionData, getAddress, getContract, } from "viem";
export default class EthereumOrangeKitSafeFactory {
    #client;
    #instance;
    constructor(client) {
        this.#client = client;
        this.#instance = getContract({ ...orangeKitSafeFactoryConfig, client });
    }
    async predictAddress(truncatedBitcoinAddress) {
        const [safeAddress] = await this.#instance.read.predictAddresses([
            truncatedBitcoinAddress,
        ]);
        return getAddress(safeAddress);
    }
    async populateSafeDeploymentTransaction(truncatedBitcoinAddress) {
        const to = this.#instance.address;
        const data = encodeFunctionData({
            abi: this.#instance.abi,
            functionName: "deploySafe",
            args: [truncatedBitcoinAddress],
        });
        return { to, data };
    }
    async simulateSafeDeploymentTransaction(truncatedBitcoinAddress, from) {
        try {
            const response = await this.#client.simulateContract({
                address: this.#instance.address,
                abi: this.#instance.abi,
                functionName: "deploySafe",
                args: [truncatedBitcoinAddress],
                account: from,
            });
            return !!response.result;
        }
        catch (error) {
            if (error instanceof Error) {
                throw new Error(`Safe deployment transaction simulation failed: ${error.message}`);
            }
            throw new Error("Safe deployment transaction simulation failed");
        }
    }
}
//# sourceMappingURL=safe-factory.js.map