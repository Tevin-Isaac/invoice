import { Contract as EthersContract } from "ethers";
import { getAddress } from "./address";
/**
 * Ethers-based contract implementation.
 */
export class EthersContractWrapper {
    /**
     * Ethers instance of the deployed contract.
     */
    instance;
    /**
     * Number of a block within which the contract was deployed. Value is read
     * from the contract deployment artifact. It can be overwritten by setting a
     * {@link EthersContractConfig.deployedAtBlockNumber} property.
     */
    deployedAtBlockNumber;
    /**
     * Address of this contract instance.
     */
    #address;
    constructor(config, deployment) {
        const contractAddress = config.address ?? getAddress(deployment.address);
        this.instance = new EthersContract(contractAddress, `${JSON.stringify(deployment.abi)}`, config.provider);
        this.#address = contractAddress;
        this.deployedAtBlockNumber = config.deployedAtBlockNumber
            ? config.deployedAtBlockNumber
            : deployment?.receipt?.blockNumber ?? 0;
    }
    /**
     * Get address of the contract instance.
     * @returns Address of this contract instance.
     */
    getAddress() {
        return this.#address;
    }
}
//# sourceMappingURL=contract.js.map