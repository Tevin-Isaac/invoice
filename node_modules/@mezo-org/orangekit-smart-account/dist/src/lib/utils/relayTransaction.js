import { TaskState } from "@gelatonetwork/relay-sdk";
import { backoffRetrier } from "./backoff";
export default async function relayTransaction(relay, relayApiKey, request, backoffOptions) {
    const { taskId } = await relay.sponsoredCall(request, relayApiKey);
    let status;
    while (
    // Yes, I'm being terrible.
    // eslint-disable-next-line no-cond-assign, no-await-in-loop
    (status = await backoffRetrier(backoffOptions.retries, backoffOptions.backoffStepMs)(() => relay.getTaskStatus(taskId)))?.taskState !== TaskState.ExecSuccess) {
        if (status?.taskState === TaskState.ExecReverted ||
            status?.taskState === TaskState.Cancelled) {
            throw new Error(`Relayed transaction failed with hash ${status.transactionHash}; ${status.lastCheckMessage ?? "no error data available"}`);
        }
        // Yes, I am still being terrible.
        // eslint-disable-next-line no-await-in-loop
        await new Promise((resolve) => {
            setTimeout(resolve, 1000);
        });
    }
    return { transactionHash: status?.transactionHash };
}
//# sourceMappingURL=relayTransaction.js.map