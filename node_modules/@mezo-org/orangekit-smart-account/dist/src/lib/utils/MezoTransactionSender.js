import { isAddressable, resolveProperties } from "ethers";
/**
 * A TransactionSender that relays through the Mezo relayer. Note that the Mezo
 * relayer verifies that the relayed call is to a Safe, a call to
 * execTransaction, and that the call refunds the relayer for spent gas. This
 * means the underlying smart account must be funded, and the signed
 * transaction must be performing the expected behavior.
 */
export default class MezoTransactionSender {
    relayEndpoint;
    // The address of the receiver of refunds; must match the expected receiver
    // of the relay, or the relay will reject transactions.
    refundReceiver;
    constructor(relayEndpoint, refundReceiver) {
        this.relayEndpoint =
            relayEndpoint ?? "https://test.mezo.org/api/v2/relay/transactions";
        this.refundReceiver =
            refundReceiver ?? "0x6e80164ea60673D64d5d6228beb684a1274Bb017";
    }
    async sendTransaction(transactionRequest) {
        const resolvedTx = await resolveProperties(transactionRequest);
        try {
            const response = await fetch(this.relayEndpoint, {
                method: "POST",
                body: JSON.stringify({
                    txTo: resolvedTx.to && isAddressable(resolvedTx.to)
                        ? await resolvedTx.to.getAddress()
                        : resolvedTx.to,
                    txData: resolvedTx.data,
                }),
                headers: { "Content-Type": "application/json" },
            });
            const { transactionHash } = (await response.json());
            // eslint-disable-next-line no-console
            console.log(`Transaction successfully submitted with hash: ${transactionHash}`);
            return { hash: transactionHash ?? "0x" };
        }
        catch (error) {
            // eslint-disable-next-line no-console
            console.log(`Error relaying transaction: ${error}`);
            throw error;
        }
    }
}
//# sourceMappingURL=MezoTransactionSender.js.map