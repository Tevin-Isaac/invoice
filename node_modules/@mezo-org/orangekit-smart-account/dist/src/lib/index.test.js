import { mock } from "jest-mock-extended";
import { OrangeKitSmartAccount } from "./index";
let orangekitSmartAccount;
let provider;
let contracts;
describe("OrangeKitSmartAccount", () => {
    beforeEach(() => {
        provider = mock();
        contracts = mock();
        const transactionSender = mock();
        orangekitSmartAccount = new OrangeKitSmartAccount(provider, 1, contracts, transactionSender);
    });
    describe("checkIfSafeExists", () => {
        it("checks safe existence correctly when safe exists", async () => {
            const bitcoinAddress = "bitcoinAddress";
            const publicKey = "publicKey";
            const ethereumAddress = "0x123";
            jest
                .spyOn(orangekitSmartAccount, "predictAddress")
                .mockResolvedValue(ethereumAddress);
            provider.getCode.mockResolvedValue("0x456");
            const result = await orangekitSmartAccount.checkIfSafeExists(bitcoinAddress, publicKey);
            expect(result).toBe(true);
        });
        it("checks safe existence correctly when safe does not exist", async () => {
            const bitcoinAddress = "bitcoinAddress";
            const publicKey = "publicKey";
            const ethereumAddress = "0x123";
            jest
                .spyOn(orangekitSmartAccount, "predictAddress")
                .mockResolvedValue(ethereumAddress);
            provider.getCode.mockResolvedValue("0x");
            const result = await orangekitSmartAccount.checkIfSafeExists(bitcoinAddress, publicKey);
            expect(result).toBe(false);
        });
    });
});
//# sourceMappingURL=index.test.js.map