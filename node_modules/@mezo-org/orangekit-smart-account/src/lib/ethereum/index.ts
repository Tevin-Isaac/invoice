import { ethers, Provider } from "ethers"
import { abi as BitcoinSafeOwnerAbi } from "@mezo-org/orangekit-contracts/artifacts/contracts/BitcoinSafeOwner.sol/BitcoinSafeOwner.json"
import { BitcoinSafeOwner, Safe } from "@mezo-org/orangekit-contracts/typechain"
import { OrangeKitContracts } from "../contracts"
import { toNetwork } from "./network"
import { EthereumOrangeKitSafeFactory } from "./safe-factory"

// eslint-disable-next-line import/prefer-default-export
export function getEthereumContracts(
  provider: Provider,
  chainId: number,
): OrangeKitContracts {
  const network = toNetwork(chainId)

  if (!network) throw new Error("Unsupported network")

  const deployer = new EthereumOrangeKitSafeFactory({ provider }, network)

  return { safeFactory: deployer }
}

export function getSafeOwner(owner: string): BitcoinSafeOwner {
  return new ethers.Contract(
    owner,
    BitcoinSafeOwnerAbi,
  ) as unknown as BitcoinSafeOwner
}

export type SafeWithOwner = {
  safe: Safe
  safeOwner: BitcoinSafeOwner
}
