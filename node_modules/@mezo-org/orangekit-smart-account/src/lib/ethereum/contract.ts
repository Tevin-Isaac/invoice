import { Contract as EthersContract, Provider } from "ethers"
import { Hex } from "../utils"
import { getAddress } from "./address"

/**
 * Contract deployment artifact.
 * @see [hardhat-deploy#Deployment](https://github.com/wighawag/hardhat-deploy/blob/0c969e9a27b4eeff9f5ccac7e19721ef2329eed2/types.ts#L358)}
 */
export interface EthersContractDeployment {
  /**
   * Address of the deployed contract.
   */
  address: string
  /**
   * Contract's ABI.
   */
  abi: unknown[]
  /**
   * Deployment transaction receipt.
   */
  receipt?: {
    /**
     * Number of block in which the contract was deployed.
     */
    blockNumber?: number
  }
}

/**
 * Use `VoidSigner` from `ethers` if you want to initialize the Ethereum
 * OrangeKit Smart Account in readonly mode.
 */
export type EthereumProvider = Provider

/**
 * Represents a config set required to connect an Ethereum contract.
 */
export interface EthersContractConfig {
  /**
   * Address of the Ethereum contract as a 0x-prefixed hex string.
   * Optional parameter, if not provided the value will be resolved from the
   * contract artifact.
   */
  address?: Hex

  /**
   * Number of a block in which the contract was deployed.
   * Optional parameter, if not provided the value will be resolved from the
   * contract artifact.
   */
  deployedAtBlockNumber?: number

  /**
   * Provides a connection to the blockchain, which can be used to query its
   * current state, simulate execution and send transactions to update the
   * state.
   */
  provider: EthereumProvider
}

/**
 * Ethers-based contract implementation.
 */
export class EthersContractWrapper<T extends EthersContract> {
  /**
   * Ethers instance of the deployed contract.
   */
  protected readonly instance: T

  /**
   * Number of a block within which the contract was deployed. Value is read
   * from the contract deployment artifact. It can be overwritten by setting a
   * {@link EthersContractConfig.deployedAtBlockNumber} property.
   */
  protected readonly deployedAtBlockNumber: number

  /**
   * Address of this contract instance.
   */
  readonly #address: Hex

  constructor(
    config: EthersContractConfig,
    deployment: EthersContractDeployment,
  ) {
    const contractAddress = config.address ?? getAddress(deployment.address)
    this.instance = new EthersContract(
      contractAddress,
      `${JSON.stringify(deployment.abi)}`,
      config.provider,
    ) as T

    this.#address = contractAddress

    this.deployedAtBlockNumber = config.deployedAtBlockNumber
      ? config.deployedAtBlockNumber
      : deployment?.receipt?.blockNumber ?? 0
  }

  /**
   * Get address of the contract instance.
   * @returns Address of this contract instance.
   */
  getAddress(): Hex {
    return this.#address
  }
}
