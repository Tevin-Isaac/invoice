import { OrangeKitSafeFactory as OrangeKitSafeFactoryTypechain } from "@mezo-org/orangekit-contracts/typechain/contracts/OrangeKitSafeFactory"
import OrangeKitSafeFactoryMainnetArtifact from "@mezo-org/orangekit-contracts/deployments/mainnet/OrangeKitSafeFactory.json"
import OrangeKitSafeFactorySepoliaArtifact from "@mezo-org/orangekit-contracts/deployments/sepolia/OrangeKitSafeFactory.json"
import OrangeKitSafeFactoryLocalhostArtifact from "@mezo-org/orangekit-contracts/deployments/localhost/OrangeKitSafeFactory.json"
import OrangeKitSafeFactoryMatsnetArtifact from "@mezo-org/orangekit-contracts/deployments/matsnet/OrangeKitSafeFactory.json"
import { ContractTransaction } from "ethers"
import { OrangeKitSafeFactory } from "../contracts"
import {
  EthersContractConfig,
  EthersContractDeployment,
  EthersContractWrapper,
} from "./contract"
import { EthereumNetwork } from "./network"
import { Hex } from "../utils"
import { getAddress } from "./address"

// eslint-disable-next-line import/prefer-default-export
export class EthereumOrangeKitSafeFactory
  // @ts-expect-error Probably Typechain issue, error: "Index signature for type
  // 'string' is missing in type 'OrangeKitSafeFactory'".
  extends EthersContractWrapper<OrangeKitSafeFactoryTypechain>
  implements OrangeKitSafeFactory
{
  constructor(config: EthersContractConfig, network: EthereumNetwork) {
    let artifact: EthersContractDeployment

    switch (network) {
      case "mainnet":
        artifact = {
          ...OrangeKitSafeFactoryMainnetArtifact,
          receipt: { blockNumber: 19512821 },
        }
        break
      case "sepolia":
        artifact = {
          ...OrangeKitSafeFactorySepoliaArtifact,
          receipt: { blockNumber: 5559111 },
        }
        break
      case "hardhat":
        artifact = {
          ...OrangeKitSafeFactoryLocalhostArtifact,
          receipt: { blockNumber: 19512821 },
        }
        break
      case "matsnet-testnet":
        artifact = {
          ...OrangeKitSafeFactoryMatsnetArtifact,
          receipt: { blockNumber: 816571 },
        }
        break
      default:
        throw new Error("Unsupported network")
    }

    super(config, artifact)
  }

  async predictAddress(truncatedBitcoinAddress: string): Promise<Hex> {
    const { safe } = await this.instance.predictAddresses(
      truncatedBitcoinAddress,
    )

    return getAddress(safe)
  }

  async populateSafeDeploymentTransaction(
    truncatedBitcoinAddress: string,
  ): Promise<ContractTransaction> {
    return this.instance.deploySafe.populateTransaction(truncatedBitcoinAddress)
  }
}
