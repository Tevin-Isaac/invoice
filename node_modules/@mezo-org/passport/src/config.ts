import { http } from "viem"
import { Chain, getDefaultConfig, WalletList } from "@rainbow-me/rainbowkit"
import { Config, CreateConfigParameters } from "wagmi"
import { CHAIN_ID, matsnetTestnetChain, RPC_BY_NETWORK } from "./constants"
import { getOKXWallet, getUnisatWallet, getXverseWallet } from "./wallet"

const transports = {
  [CHAIN_ID.testnet]: http(RPC_BY_NETWORK.testnet),
}

export const defaultConfig = {
  transports,
  walletConnectProjectId: "",
  chains: [matsnetTestnetChain] as [Chain, ...Chain[]],
  multiInjectedProviderDiscovery: true,
}

export function getDefaultWallets(): WalletList {
  const bitcoinWalletConfig = {
    rpcUrl: RPC_BY_NETWORK.testnet,
    chainId: CHAIN_ID.testnet,
    // TODO: This will be removed once we merge passport relay worked is merged
    relayApiKey: "",
  }

  const unisatWallet = getUnisatWallet(bitcoinWalletConfig)
  const okxWallet = getOKXWallet(bitcoinWalletConfig)
  const xverseWallet = getXverseWallet(bitcoinWalletConfig)

  return [
    {
      groupName: "Bitcoin",
      wallets: [unisatWallet, okxWallet, xverseWallet],
    },
  ]
}

type WagmiConfigParameters = Omit<
  CreateConfigParameters,
  "client" | "connectors" | "chains" | "wallets" | "transports"
>
type GetDefaultConfigParameters = WagmiConfigParameters & {
  appName: string
  appDescription?: string
  appUrl?: string
  appIcon?: string
  bitcoinWallets?: WalletList
  walletConnectProjectId?: string
  chains?: [Chain, ...Chain[]]
}

export function getConfig({
  appName,
  bitcoinWallets,
  walletConnectProjectId,
  ...restParameters
}: GetDefaultConfigParameters): Config {
  return getDefaultConfig({
    ...defaultConfig,
    appName,
    wallets: [...getDefaultWallets(), ...(bitcoinWallets ?? [])],
    projectId: walletConnectProjectId ?? defaultConfig.walletConnectProjectId,
    ...restParameters,
  })
}
