import { Chain, getDefaultConfig, WalletList } from "@rainbow-me/rainbowkit"
import {
  Config,
  createConfig,
  CreateConfigParameters,
  http,
  webSocket,
} from "wagmi"
import { walletConnectWallet } from "@rainbow-me/rainbowkit/wallets"
import { CHAIN_ID, mezoMainnet, mezoTestnet, RPC_BY_NETWORK } from "./constants"
import { getOKXWallet, getUnisatWallet, getXverseWallet } from "./wallet"

type WagmiConfigParameters = Omit<
  CreateConfigParameters,
  "client" | "connectors" | "chains" | "wallets" | "transports"
>
type GetDefaultConfigParameters = WagmiConfigParameters & {
  appName: string
  mezoNetwork?: "mainnet" | "testnet"
  appDescription?: string
  appUrl?: string
  appIcon?: string
  bitcoinWallets?: WalletList
  walletConnectProjectId?: string
  chains?: [Chain, ...Chain[]]
  transports?: Pick<CreateConfigParameters, "transports">
}

const transports = {
  [CHAIN_ID.mainnet]: http(RPC_BY_NETWORK.mainnet.http),
  [CHAIN_ID.testnet]: http(RPC_BY_NETWORK.testnet.http),
} as Pick<CreateConfigParameters, "transports">

export const defaultConfig: Required<
  Pick<
    GetDefaultConfigParameters,
    | "transports"
    | "walletConnectProjectId"
    | "chains"
    | "multiInjectedProviderDiscovery"
  >
> = {
  transports,
  walletConnectProjectId: "",
  chains: [mezoMainnet, mezoTestnet],
  multiInjectedProviderDiscovery: true,
}

const bitcoinWalletTestnetConfig = {
  rpcUrl: RPC_BY_NETWORK.testnet.http,
  chainId: CHAIN_ID.testnet,
}

const bitcoinWalletMainnetConfig = {
  rpcUrl: RPC_BY_NETWORK.mainnet.http,
  chainId: CHAIN_ID.mainnet,
}

export const unisatWalletMezoTestnet = getUnisatWallet(
  bitcoinWalletTestnetConfig,
)
export const okxWalletMezoTestnet = getOKXWallet(bitcoinWalletTestnetConfig)
export const xverseWalletMezoTestnet = getXverseWallet(
  bitcoinWalletTestnetConfig,
)

export const unisatWalletMezoMainnet = getUnisatWallet(
  bitcoinWalletMainnetConfig,
)
export const okxWalletMezoMainnet = getOKXWallet(bitcoinWalletMainnetConfig)
export const xverseWalletMezoMainnet = getXverseWallet(
  bitcoinWalletMainnetConfig,
)

export const preconfiguredWalletConnectWallet = (projectId: string) =>
  walletConnectWallet({
    projectId,
    options: {
      qrModalOptions: {
        enableExplorer: false,
      },
    },
  })

export function getDefaultWallets(
  network: "mainnet" | "testnet" = "mainnet",
): WalletList {
  return [
    {
      groupName: "Bitcoin",
      wallets:
        network === "mainnet"
          ? [
              unisatWalletMezoMainnet,
              okxWalletMezoMainnet,
              xverseWalletMezoMainnet,
            ]
          : [
              unisatWalletMezoTestnet,
              okxWalletMezoTestnet,
              xverseWalletMezoTestnet,
            ],
    },
    {
      groupName: "Ethereum",
      wallets: [({ projectId }) => preconfiguredWalletConnectWallet(projectId)],
    },
  ]
}

export function getConfig(config: GetDefaultConfigParameters): Config {
  const {
    appName,
    mezoNetwork = "mainnet",
    walletConnectProjectId = defaultConfig.walletConnectProjectId,
    ...restParameters
  } = config

  const wallets = config.bitcoinWallets ?? [...getDefaultWallets(mezoNetwork)]

  return getDefaultConfig({
    ...defaultConfig,
    appName,
    wallets,
    projectId: walletConnectProjectId,
    ...restParameters,
  })
}

/**
 * This config is only used to listen for Transfer events on mezo chain.
 * Should not be exported in index for public use.
 */
export const simpleWssMezoConfig = createConfig({
  chains: [mezoMainnet, mezoTestnet],
  transports: {
    [mezoMainnet.id]: webSocket(RPC_BY_NETWORK.mainnet.webSocket),
    [mezoTestnet.id]: webSocket(RPC_BY_NETWORK.testnet.webSocket),
  },
})
