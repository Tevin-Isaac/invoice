/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface OrangeKitSafeFactoryV2Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "bitcoinSafeOwnerProxyCreationCode"
      | "deploySafe"
      | "emergencyGovernance"
      | "initialize"
      | "initializeV2"
      | "initialized"
      | "initializedV2"
      | "newVariable"
      | "owner"
      | "predictAddresses"
      | "safeOwnerSingleton"
      | "safeProxyCreationCode"
      | "safeSingleton"
      | "transferOwnership"
      | "upgradeSafeOwnerSingleton"
      | "upgradeSingleton"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "NewEventV2"
      | "OwnershipTransferred"
      | "SafeDeployed"
      | "SafeOwnerSingletonUpgraded"
      | "SingletonUpgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "bitcoinSafeOwnerProxyCreationCode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deploySafe",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeV2",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initializedV2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "newVariable",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "predictAddresses",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeOwnerSingleton",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeProxyCreationCode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeSingleton",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeSafeOwnerSingleton",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeSingleton",
    values: [AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "bitcoinSafeOwnerProxyCreationCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deploySafe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializedV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newVariable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "predictAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeOwnerSingleton",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeProxyCreationCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeSingleton",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeSafeOwnerSingleton",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeSingleton",
    data: BytesLike
  ): Result;
}

export namespace NewEventV2Event {
  export type InputTuple = [
    salt: BytesLike,
    safe: AddressLike,
    bitcoinSafeOwner: AddressLike
  ];
  export type OutputTuple = [
    salt: string,
    safe: string,
    bitcoinSafeOwner: string
  ];
  export interface OutputObject {
    salt: string;
    safe: string;
    bitcoinSafeOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SafeDeployedEvent {
  export type InputTuple = [
    safe: AddressLike,
    bitcoinSafeOwner: AddressLike,
    truncatedBitcoinAddress: BytesLike
  ];
  export type OutputTuple = [
    safe: string,
    bitcoinSafeOwner: string,
    truncatedBitcoinAddress: string
  ];
  export interface OutputObject {
    safe: string;
    bitcoinSafeOwner: string;
    truncatedBitcoinAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SafeOwnerSingletonUpgradedEvent {
  export type InputTuple = [
    oldSingleton: AddressLike,
    newSingleton: AddressLike
  ];
  export type OutputTuple = [oldSingleton: string, newSingleton: string];
  export interface OutputObject {
    oldSingleton: string;
    newSingleton: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SingletonUpgradedEvent {
  export type InputTuple = [
    oldSingleton: AddressLike,
    newSingleton: AddressLike
  ];
  export type OutputTuple = [oldSingleton: string, newSingleton: string];
  export interface OutputObject {
    oldSingleton: string;
    newSingleton: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface OrangeKitSafeFactoryV2 extends BaseContract {
  connect(runner?: ContractRunner | null): OrangeKitSafeFactoryV2;
  waitForDeployment(): Promise<this>;

  interface: OrangeKitSafeFactoryV2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  bitcoinSafeOwnerProxyCreationCode: TypedContractMethod<[], [string], "view">;

  deploySafe: TypedContractMethod<
    [truncatedBitcoinAddress: BytesLike],
    [[string, string] & { safe: string; bitcoinSafeOwner: string }],
    "nonpayable"
  >;

  emergencyGovernance: TypedContractMethod<[], [string], "view">;

  initialize: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: AddressLike],
    [void],
    "nonpayable"
  >;

  initializeV2: TypedContractMethod<
    [_newVariable: string],
    [void],
    "nonpayable"
  >;

  initialized: TypedContractMethod<[], [boolean], "view">;

  initializedV2: TypedContractMethod<[], [boolean], "view">;

  newVariable: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  predictAddresses: TypedContractMethod<
    [truncatedBitcoinAddress: BytesLike],
    [[string, string] & { safe: string; bitcoinSafeOwner: string }],
    "view"
  >;

  safeOwnerSingleton: TypedContractMethod<[], [string], "view">;

  safeProxyCreationCode: TypedContractMethod<[], [string], "view">;

  safeSingleton: TypedContractMethod<[], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeSafeOwnerSingleton: TypedContractMethod<
    [newSafeOwnerSingleton: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeSingleton: TypedContractMethod<
    [newSingleton: AddressLike, initData: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "bitcoinSafeOwnerProxyCreationCode"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "deploySafe"
  ): TypedContractMethod<
    [truncatedBitcoinAddress: BytesLike],
    [[string, string] & { safe: string; bitcoinSafeOwner: string }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyGovernance"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initializeV2"
  ): TypedContractMethod<[_newVariable: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "initialized"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "initializedV2"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "newVariable"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "predictAddresses"
  ): TypedContractMethod<
    [truncatedBitcoinAddress: BytesLike],
    [[string, string] & { safe: string; bitcoinSafeOwner: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "safeOwnerSingleton"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "safeProxyCreationCode"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "safeSingleton"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeSafeOwnerSingleton"
  ): TypedContractMethod<
    [newSafeOwnerSingleton: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeSingleton"
  ): TypedContractMethod<
    [newSingleton: AddressLike, initData: BytesLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "NewEventV2"
  ): TypedContractEvent<
    NewEventV2Event.InputTuple,
    NewEventV2Event.OutputTuple,
    NewEventV2Event.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SafeDeployed"
  ): TypedContractEvent<
    SafeDeployedEvent.InputTuple,
    SafeDeployedEvent.OutputTuple,
    SafeDeployedEvent.OutputObject
  >;
  getEvent(
    key: "SafeOwnerSingletonUpgraded"
  ): TypedContractEvent<
    SafeOwnerSingletonUpgradedEvent.InputTuple,
    SafeOwnerSingletonUpgradedEvent.OutputTuple,
    SafeOwnerSingletonUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "SingletonUpgraded"
  ): TypedContractEvent<
    SingletonUpgradedEvent.InputTuple,
    SingletonUpgradedEvent.OutputTuple,
    SingletonUpgradedEvent.OutputObject
  >;

  filters: {
    "NewEventV2(bytes32,address,address)": TypedContractEvent<
      NewEventV2Event.InputTuple,
      NewEventV2Event.OutputTuple,
      NewEventV2Event.OutputObject
    >;
    NewEventV2: TypedContractEvent<
      NewEventV2Event.InputTuple,
      NewEventV2Event.OutputTuple,
      NewEventV2Event.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "SafeDeployed(address,address,bytes20)": TypedContractEvent<
      SafeDeployedEvent.InputTuple,
      SafeDeployedEvent.OutputTuple,
      SafeDeployedEvent.OutputObject
    >;
    SafeDeployed: TypedContractEvent<
      SafeDeployedEvent.InputTuple,
      SafeDeployedEvent.OutputTuple,
      SafeDeployedEvent.OutputObject
    >;

    "SafeOwnerSingletonUpgraded(address,address)": TypedContractEvent<
      SafeOwnerSingletonUpgradedEvent.InputTuple,
      SafeOwnerSingletonUpgradedEvent.OutputTuple,
      SafeOwnerSingletonUpgradedEvent.OutputObject
    >;
    SafeOwnerSingletonUpgraded: TypedContractEvent<
      SafeOwnerSingletonUpgradedEvent.InputTuple,
      SafeOwnerSingletonUpgradedEvent.OutputTuple,
      SafeOwnerSingletonUpgradedEvent.OutputObject
    >;

    "SingletonUpgraded(address,address)": TypedContractEvent<
      SingletonUpgradedEvent.InputTuple,
      SingletonUpgradedEvent.OutputTuple,
      SingletonUpgradedEvent.OutputObject
    >;
    SingletonUpgraded: TypedContractEvent<
      SingletonUpgradedEvent.InputTuple,
      SingletonUpgradedEvent.OutputTuple,
      SingletonUpgradedEvent.OutputObject
    >;
  };
}
