/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface BitcoinSafeOwnerHarnessInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DOMAIN_SEPARATOR"
      | "UPGRADE_SINGLETON_TYPEHASH"
      | "emergencyGovernance"
      | "emergencyUpgradeSingleton"
      | "encodeDigest_public"
      | "exposed_initialized"
      | "initialized"
      | "isValidSignature(bytes32,bytes)"
      | "isValidSignature(bytes,bytes)"
      | "set_initialized"
      | "setup"
      | "shouldEncodeDigest_public"
      | "truncatedBitcoinAddress"
      | "upgradeSingleton"
      | "version"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "SingletonUpgraded"): EventFragment;

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADE_SINGLETON_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyUpgradeSingleton",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeDigest_public",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "exposed_initialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isValidSignature(bytes32,bytes)",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidSignature(bytes,bytes)",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "set_initialized",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setup",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "shouldEncodeDigest_public",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "truncatedBitcoinAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeSingleton",
    values: [AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADE_SINGLETON_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyUpgradeSingleton",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeDigest_public",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exposed_initialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidSignature(bytes32,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidSignature(bytes,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "set_initialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setup", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "shouldEncodeDigest_public",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "truncatedBitcoinAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeSingleton",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export namespace SingletonUpgradedEvent {
  export type InputTuple = [
    oldSingleton: AddressLike,
    newSingleton: AddressLike
  ];
  export type OutputTuple = [oldSingleton: string, newSingleton: string];
  export interface OutputObject {
    oldSingleton: string;
    newSingleton: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BitcoinSafeOwnerHarness extends BaseContract {
  connect(runner?: ContractRunner | null): BitcoinSafeOwnerHarness;
  waitForDeployment(): Promise<this>;

  interface: BitcoinSafeOwnerHarnessInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DOMAIN_SEPARATOR: TypedContractMethod<[], [string], "view">;

  UPGRADE_SINGLETON_TYPEHASH: TypedContractMethod<[], [string], "view">;

  emergencyGovernance: TypedContractMethod<[], [string], "view">;

  emergencyUpgradeSingleton: TypedContractMethod<
    [newSingleton: AddressLike, initData: BytesLike],
    [void],
    "nonpayable"
  >;

  encodeDigest_public: TypedContractMethod<
    [value: BytesLike],
    [string],
    "view"
  >;

  exposed_initialized: TypedContractMethod<[], [boolean], "view">;

  initialized: TypedContractMethod<[], [boolean], "view">;

  "isValidSignature(bytes32,bytes)": TypedContractMethod<
    [digest: BytesLike, signature: BytesLike],
    [string],
    "view"
  >;

  "isValidSignature(bytes,bytes)": TypedContractMethod<
    [data: BytesLike, signature: BytesLike],
    [string],
    "view"
  >;

  set_initialized: TypedContractMethod<
    [_initialized: boolean],
    [boolean],
    "nonpayable"
  >;

  setup: TypedContractMethod<
    [_truncatedBitcoinAddress: BytesLike, _emergencyGovernance: AddressLike],
    [void],
    "nonpayable"
  >;

  shouldEncodeDigest_public: TypedContractMethod<
    [v: BigNumberish],
    [[boolean, bigint] & { should: boolean; decodedV: bigint }],
    "view"
  >;

  truncatedBitcoinAddress: TypedContractMethod<[], [string], "view">;

  upgradeSingleton: TypedContractMethod<
    [newSingleton: AddressLike, initData: BytesLike, signature: BytesLike],
    [void],
    "nonpayable"
  >;

  version: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DOMAIN_SEPARATOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "UPGRADE_SINGLETON_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "emergencyGovernance"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "emergencyUpgradeSingleton"
  ): TypedContractMethod<
    [newSingleton: AddressLike, initData: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "encodeDigest_public"
  ): TypedContractMethod<[value: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "exposed_initialized"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "initialized"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isValidSignature(bytes32,bytes)"
  ): TypedContractMethod<
    [digest: BytesLike, signature: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "isValidSignature(bytes,bytes)"
  ): TypedContractMethod<
    [data: BytesLike, signature: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "set_initialized"
  ): TypedContractMethod<[_initialized: boolean], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "setup"
  ): TypedContractMethod<
    [_truncatedBitcoinAddress: BytesLike, _emergencyGovernance: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "shouldEncodeDigest_public"
  ): TypedContractMethod<
    [v: BigNumberish],
    [[boolean, bigint] & { should: boolean; decodedV: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "truncatedBitcoinAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "upgradeSingleton"
  ): TypedContractMethod<
    [newSingleton: AddressLike, initData: BytesLike, signature: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "SingletonUpgraded"
  ): TypedContractEvent<
    SingletonUpgradedEvent.InputTuple,
    SingletonUpgradedEvent.OutputTuple,
    SingletonUpgradedEvent.OutputObject
  >;

  filters: {
    "SingletonUpgraded(address,address)": TypedContractEvent<
      SingletonUpgradedEvent.InputTuple,
      SingletonUpgradedEvent.OutputTuple,
      SingletonUpgradedEvent.OutputObject
    >;
    SingletonUpgraded: TypedContractEvent<
      SingletonUpgradedEvent.InputTuple,
      SingletonUpgradedEvent.OutputTuple,
      SingletonUpgradedEvent.OutputObject
    >;
  };
}
