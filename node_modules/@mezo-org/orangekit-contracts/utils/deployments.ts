import { artifacts, deployments } from "hardhat"
import { TransactionResponse } from "ethers"
import { HardhatRuntimeEnvironment } from "hardhat/types"
import { Deployment } from "hardhat-deploy/types"

/**
 * Returns number of confirmations the deployment script should wait for a given
 * network. One confirmation is not enough for the Etherscan verification to work
 * due to the time needed for propagation of deployed contract.
 *
 * @param hre Hardhat Runtime Environment instance.
 * @returns Number of confirmations to wait.
 */
export function waitConfirmationsNumber(
  hre: HardhatRuntimeEnvironment,
): number {
  switch (hre.network.name) {
    case "mainnet":
    case "sepolia":
      return 6
    default:
      return 1
  }
}

export async function waitForTransaction(
  hre: HardhatRuntimeEnvironment,
  transactionOrHash: string | TransactionResponse,
) {
  if (hre.network.name === "hardhat") {
    return
  }

  const transaction =
    typeof transactionOrHash === "string"
      ? await hre.ethers.provider.getTransaction(transactionOrHash)
      : transactionOrHash

  if (!transaction) {
    throw new Error(`Transaction ${transactionOrHash} not found`)
  }

  let currentConfirmations = await transaction.confirmations()
  const requiredConfirmations = waitConfirmationsNumber(hre)
  while (currentConfirmations < requiredConfirmations) {
    // wait 1s between each check to save API compute units
    // eslint-disable-next-line no-await-in-loop, no-promise-executor-return
    await new Promise((resolve) => setTimeout(resolve, 1000))
    // eslint-disable-next-line no-await-in-loop
    currentConfirmations = await transaction.confirmations()
  }
}

/**
 * Saves the deployment artifact of a deployed contract.
 * @param {string} deploymentName - The name of the deployment.
 * @param {string} contractAddress - The deployed contract's address.
 * @param {string} transactionHash - The hash of the transaction used to deploy the contract.
 * @param {Object} [opts] - Additional options for the deployment artifact.
 * @param {string} [opts.contractName] - The name of the contract, used to retrieve the artifact.
 * Defaults to the deployment name if not specified.
 * @param {unknown[]} [opts.constructorArgs] - The arguments passed to the contract's
 * constructor.
 * @param {string} [opts.implementation] - The address of the contract's implementation,
 * for proxy-based deployments.
 * @param {boolean} [opts.log] - If true, logs the details of the saved deployment
 * artifact.
 * @returns {Promise<Deployment>} Details of the deployment.

 */
export async function saveDeploymentArtifact(
  deploymentName: string,
  contractAddress: string,
  transactionHash: string,
  opts?: {
    contractName?: string
    constructorArgs?: unknown[]
    implementation?: string
    log?: boolean
  },
): Promise<Deployment> {
  const artifact = await artifacts.readArtifact(
    opts?.contractName || deploymentName,
  )

  const deployment: Deployment = {
    address: contractAddress,
    abi: artifact.abi,
    transactionHash,
    args: opts?.constructorArgs,
    implementation: opts?.implementation,
  }

  await deployments.save(deploymentName, deployment)

  if (opts?.log) {
    deployments.log(
      `Saved deployment artifact for '${deploymentName}' with address ${contractAddress}` +
        ` and deployment transaction: ${transactionHash}`,
    )
  }

  return deployment
}
