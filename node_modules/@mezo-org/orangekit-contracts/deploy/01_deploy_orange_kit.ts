import { DeployFunction } from "hardhat-deploy/dist/types"
import { HardhatRuntimeEnvironment } from "hardhat/types"
import { deployWithSingletonFactory } from "../utils/erc2470"
import { OrangeKitDeployer } from "../typechain"
import {
  waitForTransaction,
  saveDeploymentArtifact,
  waitConfirmationsNumber,
} from "../utils/deployments"

const func: DeployFunction = async (hre: HardhatRuntimeEnvironment) => {
  const { helpers, ethers, deployments } = hre
  const { deployer } = await helpers.signers.getNamedSigners()

  const {
    contractInstance: orangeKitDeployer,
    deployment: orangeKitDeployerDeployment,
  } = await deployWithSingletonFactory<OrangeKitDeployer>("OrangeKitDeployer", {
    contractName: "contracts/OrangeKitDeployer.sol:OrangeKitDeployer",
    from: deployer,
    salt: ethers.keccak256(
      ethers.toUtf8Bytes(
        "Well if this kit is not orange, I do not know what is...",
      ),
    ),
    confirmations: waitConfirmationsNumber(hre),
  })

  // Deploy contracts.
  deployments.log("Deploying contracts with OrangeKitDeployer...")

  const deployTx = await orangeKitDeployer.connect(deployer).deploy()
  await waitForTransaction(hre, deployTx)

  // Save deployment artifacts.
  const emergencyGovernanceDeployment = await saveDeploymentArtifact(
    "EmergencyGovernance",
    await orangeKitDeployer.EMERGENCY_GOVERNANCE(),
    orangeKitDeployerDeployment.transactionHash!,
    {
      contractName: "contracts/EmergencyGovernance.sol:EmergencyGovernance",
      constructorArgs: [await orangeKitDeployer.EMERGENCY_UPGRADER()],
      log: true,
    },
  )

  const bitcoinSafeOwnerSingletonDeployment = await saveDeploymentArtifact(
    "BitcoinSafeOwnerSingleton_v1.0.0-beta.2",
    await orangeKitDeployer.BITCOIN_SAFE_OWNER_SINGLETON(),
    orangeKitDeployerDeployment.transactionHash!,
    {
      contractName: "contracts/BitcoinSafeOwner.sol:BitcoinSafeOwner",
      log: true,
    },
  )

  const orangeKitSafeFactorySingletonDeployment = await saveDeploymentArtifact(
    "OrangeKitSafeFactorySingleton_v1.0.0-beta.2",
    await orangeKitDeployer.ORANGE_KIT_SAFE_FACTORY_SINGLETON(),
    orangeKitDeployerDeployment.transactionHash!,
    {
      contractName: "contracts/OrangeKitSafeFactory.sol:OrangeKitSafeFactory",
      log: true,
    },
  )

  const orangeKitSafeFactoryDeployment = await saveDeploymentArtifact(
    "OrangeKitSafeFactory",
    await orangeKitDeployer.ORANGE_KIT_SAFE_FACTORY_PROXY(),
    orangeKitDeployerDeployment.transactionHash!,
    {
      contractName: "contracts/OrangeKitSafeFactory.sol:OrangeKitSafeFactory",
      implementation: orangeKitSafeFactorySingletonDeployment.address,
      constructorArgs: [
        await orangeKitDeployer.ORANGE_KIT_SAFE_FACTORY_SINGLETON(),
      ],
      log: true,
    },
  )

  if (hre.network.tags.etherscan) {
    deployments.log("Verifying contracts on Etherscan...")

    await helpers.etherscan.verify(orangeKitDeployerDeployment)
    await helpers.etherscan.verify(emergencyGovernanceDeployment)
    await helpers.etherscan.verify(bitcoinSafeOwnerSingletonDeployment)
    await helpers.etherscan.verify(orangeKitSafeFactorySingletonDeployment)
    await helpers.etherscan.verify(
      orangeKitSafeFactoryDeployment,
      "contracts/Proxy.sol:Proxy",
    )
  }

  if (hre.network.tags.tenderly) {
    deployments.log("Verifying contracts on Tenderly...")

    await hre.tenderly.verify({
      name: "OrangeKitDeployer",
      address: orangeKitDeployerDeployment.address,
    })
    await hre.tenderly.verify({
      name: "EmergencyGovernance",
      address: emergencyGovernanceDeployment.address,
    })
    await hre.tenderly.verify({
      name: "BitcoinSafeOwner",
      address: bitcoinSafeOwnerSingletonDeployment.address,
    })
    await hre.tenderly.verify({
      name: "OrangeKitSafeFactory",
      address: orangeKitSafeFactorySingletonDeployment.address,
    })
    await hre.tenderly.verify({
      name: "contracts/Proxy.sol:Proxy",
      address: orangeKitSafeFactoryDeployment.address,
    })
  }
}

export default func

func.tags = ["DeployOrangeKit"]
