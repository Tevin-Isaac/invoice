import { DeployFunction } from "hardhat-deploy/dist/types"
import { HardhatRuntimeEnvironment } from "hardhat/types"
import { parseEther } from "ethers"
import { deployWithSingletonFactory } from "../utils/erc2470"
import { MigrationTo_1_0_0_beta_3 } from "../typechain"
import {
  waitForTransaction,
  saveDeploymentArtifact,
  waitConfirmationsNumber,
} from "../utils/deployments"

const func: DeployFunction = async (hre: HardhatRuntimeEnvironment) => {
  const { helpers, ethers, deployments, getNamedAccounts } = hre
  const { deployer } = await helpers.signers.getNamedSigners()

  deployments.log("Deploying v1.0.0-beta.3 migration contract...")

  const {
    contractInstance: migrationDeployer,
    deployment: migrationDeployment,
  } = await deployWithSingletonFactory<MigrationTo_1_0_0_beta_3>(
    "MigrationTo_1_0_0_beta_3",
    {
      contractName:
        "contracts/v1.0.0-beta.3/MigrationTo_1_0_0_beta_3.sol:MigrationTo_1_0_0_beta_3",
      from: deployer,
      salt: ethers.keccak256(
        ethers.toUtf8Bytes(
          "Well if this kit is not orange, I do not know what is...",
        ),
      ),
      confirmations: waitConfirmationsNumber(hre),
    },
  )

  // Deploy contracts.
  deployments.log("Deploying v1.0.0-beta.3 singleton contracts...")

  const deployTx = await migrationDeployer.connect(deployer).deploy()
  await waitForTransaction(hre, deployTx)

  // Save deployment artifacts.
  const bitcoinSafeOwnerSingletonDeployment = await saveDeploymentArtifact(
    "BitcoinSafeOwnerSingleton_v1.0.0-beta.3",
    await migrationDeployer.BITCOIN_SAFE_OWNER_SINGLETON(),
    deployTx.hash,
    {
      contractName:
        "contracts/v1.0.0-beta.3/BitcoinSafeOwner.sol:BitcoinSafeOwner",
      log: true,
    },
  )

  const orangeKitSafeFactorySingletonDeployment = await saveDeploymentArtifact(
    "OrangeKitSafeFactorySingleton_v1.0.0-beta.3",
    await migrationDeployer.ORANGE_KIT_SAFE_FACTORY_SINGLETON(),
    deployTx.hash,
    {
      contractName:
        "contracts/v1.0.0-beta.3/OrangeKitSafeFactory.sol:OrangeKitSafeFactory",
      log: true,
    },
  )

  // overwrite proxy deployment file with the new implementation
  const orangeKitSafeFactory = await deployments.get("OrangeKitSafeFactory")
  await saveDeploymentArtifact(
    "OrangeKitSafeFactory",
    orangeKitSafeFactory.address,
    orangeKitSafeFactory.transactionHash!,
    {
      contractName:
        "contracts/v1.0.0-beta.3/OrangeKitSafeFactory.sol:OrangeKitSafeFactory",
      implementation: orangeKitSafeFactorySingletonDeployment.address,
      log: true,
    },
  )

  if (hre.network.tags.etherscan) {
    deployments.log("Verifying contracts on Etherscan...")

    await helpers.etherscan.verify(migrationDeployment)
    await helpers.etherscan.verify(bitcoinSafeOwnerSingletonDeployment)
    await helpers.etherscan.verify(orangeKitSafeFactorySingletonDeployment)
  }

  if (hre.network.tags.tenderly) {
    deployments.log("Verifying contracts on Tenderly...")

    await hre.tenderly.verify({
      name: "MigrationTo_1_0_0_beta_3",
      address: migrationDeployment.address,
    })
    await hre.tenderly.verify({
      name: "contracts/v1.0.0-beta.3/BitcoinSafeOwner.sol:BitcoinSafeOwner",
      address: bitcoinSafeOwnerSingletonDeployment.address,
    })
    await hre.tenderly.verify({
      name: "contracts/v1.0.0-beta.3/OrangeKitSafeFactory.sol:OrangeKitSafeFactory",
      address: orangeKitSafeFactorySingletonDeployment.address,
    })
  }

  if (hre.network.name !== "hardhat") {
    deployments.log("*********************************************************")
    deployments.log("   Migration contract deployed. The governance should    ")
    deployments.log("   in the same transaction pass the ownership of the     ")
    deployments.log(" OrangeKitSafeFactory to the migration contract and call ")
    deployments.log("     the migrate function on the migration contract.     ")
    deployments.log("*********************************************************")
  } else {
    deployments.log("Applying v1.0.0-beta.2 -> v1.0.0-beta.3 migration...")

    const { emergencyGovernanceMultisig } = await getNamedAccounts()
    await deployer.sendTransaction({
      to: emergencyGovernanceMultisig,
      value: parseEther("1"),
    })

    await deployments.execute(
      "OrangeKitSafeFactory",
      { from: emergencyGovernanceMultisig, log: true, waitConfirmations: 1 },
      "transferOwnership",
      migrationDeployment.address,
    )

    await deployments.execute(
      "MigrationTo_1_0_0_beta_3",
      { from: emergencyGovernanceMultisig, log: true, waitConfirmations: 1 },
      "migrate",
    )

    deployments.log("v1.0.0-beta.2 -> v1.0.0-beta.3 migration completed")
  }
}

export default func
func.tags = ["MigrationTo_1_0_0_beta_3"]
