// SPDX-License-Identifier: GPL-3.0-only
pragma solidity 0.8.25;

import "./EmergencyGovernance.sol";
import "./BitcoinSafeOwner.sol";
import "./OrangeKitSafeFactory.sol";
import "./Proxy.sol";

/// @title OrangeKitDeployer
/// @notice OrangeKitDeployer deploys all OrangeKit contracts to the chain.
///         The OrangeKitDeployer should be deployed using EIP2470 singleton
///         factory. This way, all contracts deployed by the OrangeKitDeployer
///         have predictable addresses.
contract OrangeKitDeployer {
    bytes32 public constant SALT =
        keccak256("Well if this kit is not orange, I do not know what is...");

    /// @notice Address of the SingletonFactory defined in EIP2470.
    address public constant EIP2470_SINGLETON_FACTORY =
        0xce0042B868300000d44A59004Da54A005ffdcf9f;

    /// @notice Address of the initial emergency upgrader used in the
    ///         EmergencyGovernance contract.
    address public constant EMERGENCY_UPGRADER =
        0x98D8899c3030741925BE630C710A98B57F397C7a;

    /// @notice Address of the Safe singleton in version 1.4.1.
    address public constant SAFE_SINGLETON =
        0x41675C099F32341bf84BFc5382aF534df5C7461a;

    /// @notice The address of the deployed EmergencyGovernance contract.
    /// @dev Zero address before the contract is deployed.
    address public EMERGENCY_GOVERNANCE;

    /// @notice The address of the deployed BitcoinSafeOwner singleton contract.
    /// @dev Zero address before the contract is deployed.
    address public BITCOIN_SAFE_OWNER_SINGLETON;

    /// @notice The address of the deployed OrangeKitSafeFactory singleton
    ///         contract.
    /// @dev Zero address before the contract is deployed.
    address public ORANGE_KIT_SAFE_FACTORY_SINGLETON;

    /// @notice The address of the deployed OrangeKitSafeFactory proxy
    ///         contract.
    /// @dev Zero address before the contract is deployed.
    address public ORANGE_KIT_SAFE_FACTORY_PROXY;

    event EmergencyGovernanceDeployed(address emergencyGovernance);
    event BitcoinSafeOwnerSingletonDeployed(address bitcoinSafeOwnerSingleton);
    event OrangeKitSafeFactorySingletonDeployed(
        address orangeKitSafeFactorySingleton
    );
    event OrangeKitSafeFactoryProxyDeployed(address orangeKitSafeFactoryProxy);

    error EmergencyGovernanceNotDeployed();
    error BitcoinSafeOwnerSingletonNotDeployed();
    error OrangeKitSafeFactorySingletonNotDeployed();
    error Create2Failed();

    /// @notice Deploys all contracts in one go. Can be called by anyone.
    /// @dev If the block gas limit does not allow for deploying all contracts
    ///      in one go, they can be deployed individually one by one using the
    ///      individual deploy functions.
    function deploy() external {
        deployEmergencyGovernance();
        deployBitcoinSafeOwnerSingleton();
        deployOrangeKitSafeFactorySingleton();
        deployOrangeKitSafeFactoryProxy();
    }

    /// @notice Deploys the EmergencyGovernance contract. Can be called by
    ///         anyone.
    function deployEmergencyGovernance() public {
        EMERGENCY_GOVERNANCE = _deploy(
            abi.encodePacked(
                type(EmergencyGovernance).creationCode,
                uint256(uint160(EMERGENCY_UPGRADER))
            )
        );
        emit EmergencyGovernanceDeployed(EMERGENCY_GOVERNANCE);
    }

    /// @notice Deploys the BitcoinSafeOwner singleton contract. Can be called
    ///         by anyone.
    function deployBitcoinSafeOwnerSingleton() public {
        BITCOIN_SAFE_OWNER_SINGLETON = _deploy(
            abi.encodePacked(type(BitcoinSafeOwner).creationCode)
        );
        emit BitcoinSafeOwnerSingletonDeployed(BITCOIN_SAFE_OWNER_SINGLETON);
    }

    /// @notice Deploys the OrangeKitSafeFactory singleton contract. Can be
    ///         called by anyone.
    function deployOrangeKitSafeFactorySingleton() public {
        ORANGE_KIT_SAFE_FACTORY_SINGLETON = _deploy(
            abi.encodePacked(type(OrangeKitSafeFactory).creationCode)
        );
        emit OrangeKitSafeFactorySingletonDeployed(
            ORANGE_KIT_SAFE_FACTORY_SINGLETON
        );
    }

    /// @notice Deploys and initializes the OrangeKitSafeFactory proxy contract.
    ///         Can be called by anyone. Requires all other contracts to be
    ///         already deployed.
    function deployOrangeKitSafeFactoryProxy() public {
        if (EMERGENCY_GOVERNANCE == address(0)) {
            revert EmergencyGovernanceNotDeployed();
        }
        if (BITCOIN_SAFE_OWNER_SINGLETON == address(0)) {
            revert BitcoinSafeOwnerSingletonNotDeployed();
        }
        if (ORANGE_KIT_SAFE_FACTORY_SINGLETON == address(0)) {
            revert OrangeKitSafeFactorySingletonNotDeployed();
        }
        ORANGE_KIT_SAFE_FACTORY_PROXY = deployProxy(
            ORANGE_KIT_SAFE_FACTORY_SINGLETON
        );

        emit OrangeKitSafeFactoryProxyDeployed(ORANGE_KIT_SAFE_FACTORY_PROXY);

        OrangeKitSafeFactory(ORANGE_KIT_SAFE_FACTORY_PROXY).initialize(
            SAFE_SINGLETON,
            BITCOIN_SAFE_OWNER_SINGLETON,
            EMERGENCY_GOVERNANCE
        );

        OrangeKitSafeFactory(ORANGE_KIT_SAFE_FACTORY_PROXY).transferOwnership(
            EMERGENCY_UPGRADER
        );
    }

    /// @dev Deploys a new proxy contract.
    /// @param singleton Address of the singleton contract used by the proxy.
    /// @return proxy Address of the deployed proxy contract.
    function deployProxy(address singleton) internal returns (address proxy) {
        return
            _deploy(
                abi.encodePacked(
                    type(Proxy).creationCode,
                    uint256(uint160(singleton))
                )
            );
    }

    /// @dev Deploys a contract with CREATE2.
    /// @param deploymentData Encoded deployment data.
    /// @return deployedContract Address of the deployed contract.
    function _deploy(
        bytes memory deploymentData
    ) internal returns (address deployedContract) {
        bytes32 salt = SALT;
        // solhint-disable-next-line no-inline-assembly
        assembly {
            deployedContract := create2(
                0x0,
                add(0x20, deploymentData),
                mload(deploymentData),
                salt
            )
        }
        if (address(deployedContract) == address(0)) {
            revert Create2Failed();
        }
    }
}
