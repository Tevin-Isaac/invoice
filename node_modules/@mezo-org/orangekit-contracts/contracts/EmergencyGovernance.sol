// SPDX-License-Identifier: GPL-3.0-only
pragma solidity 0.8.25;

import "@openzeppelin/contracts/access/Ownable2Step.sol";

/// @title Emergency Governance
/// @notice This contract holds the emergency upgrader address responsible for
///         executing emergency governance actions in case of unforeseen
///         circumstances. Only the contract owner can set or change the
///         emergency upgrader address. This contract will STOP working after
///         the governance decides to disable emergency upgrades.
contract EmergencyGovernance is Ownable2Step {
    bool public disabled;
    address internal _emergencyUpgrader;

    event Disabled();

    /// @notice Event fired when the emergency upgrader address is changed.
    event EmergencyUpgraderChanged(
        address oldEmergencyUpgrader,
        address newEmergencyUpgrader
    );

    /// @notice Error thrown when an invalid emergency upgrader address is
    ///         provided.
    error InvalidEmergencyUpgraderAddress(address addr);

    error EmergencyUpgradesDisabled();

    constructor(
        address emergencyUpgraderAddress
    ) Ownable(emergencyUpgraderAddress) {
        _setEmergencyUpgrader(emergencyUpgraderAddress);
    }

    modifier whenEnabled() {
        if (disabled) {
            revert EmergencyUpgradesDisabled();
        }
        _;
    }

    /// @notice Returns the emergency upgrader address.
    function emergencyUpgrader() external view whenEnabled returns (address) {
        return _emergencyUpgrader;
    }

    function disable() external onlyOwner whenEnabled {
        emit Disabled();
        disabled = true;
    }

    /// @notice Sets the emergency upgrader address.
    /// @dev Only callable by the contract owner.
    /// @param newEmergencyUpgrader The address of the new emergency upgrader.
    function setEmergencyUpgrader(
        address newEmergencyUpgrader
    ) external onlyOwner whenEnabled {
        _setEmergencyUpgrader(newEmergencyUpgrader);
    }

    function _setEmergencyUpgrader(address newEmergencyUpgrader) internal {
        if (newEmergencyUpgrader == address(0)) {
            revert InvalidEmergencyUpgraderAddress(newEmergencyUpgrader);
        }

        emit EmergencyUpgraderChanged(_emergencyUpgrader, newEmergencyUpgrader);
        _emergencyUpgrader = newEmergencyUpgrader;
    }
}
