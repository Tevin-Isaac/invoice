// SPDX-License-Identifier: GPL-3.0-only
pragma solidity 0.8.25;

// This file contains Legacy ERC-1271 signatures validator that assumes `isValidSignature`
// function to require data bytes, which is incompatible with the standard which
// expects bytes32 hash digest.
// This validator is used by Safe contract up to version v1.4.1.
//
// The abstract contract was build with the ISignatureValidator taken from
// Safe's v1.4.1-build.0:
// https://github.com/safe-global/safe-smart-account/blob/192c7dc67290940fcbc75165522bb86a37187069/contracts/interfaces/ISignatureValidator.sol

/// @title LegacyERC1271
/// @notice Abstract contract for legacy Safe signature validation.
/// @dev This contract implements Safe's v1.4.1 `ISignatureValidator` without
///      adding additional functionality, serving as a base for specific legacy
///      Safe-compatible signature validation implementations.
abstract contract LegacyERC1271 {
    // bytes4(keccak256("isValidSignature(bytes,bytes)")
    bytes4 internal constant LEGACY_SAFE_ERC1271_MAGIC_VALUE = 0x20c13b0b;

    /**
     * @notice Legacy EIP1271 method to validate a signature.
     * @param _data Arbitrary length data signed on the behalf of address(this).
     * @param _signature Signature byte array associated with _data.
     *
     * MUST return the bytes4 magic value 0x20c13b0b when function passes.
     * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)
     * MUST allow external calls
     */
    function isValidSignature(
        bytes memory _data,
        bytes memory _signature
    ) public view virtual returns (bytes4);
}
