// SPDX-License-Identifier: GPL-3.0-only
pragma solidity 0.8.25;

import {OrangeKitSafeFactory} from "./OrangeKitSafeFactory.sol";
import {BitcoinSafeOwner} from "./BitcoinSafeOwner.sol";

/// @title v1.0.0-beta.2 to v1.0.0-beta.3 migration contract.
/// @notice The migration contract performs an upgrade of OrangeKitSafeFactory
///         and the BitcoinSafeOwner from version v1.0.0-beta.2 to version
///         v1.0.0-beta.3. The migration contract allows to perform the whole
///         migration in one transaction without the need to assemble
///         complicated transactions by the governance. Before the migration
///         happens, the `deploy` function` should be used to deploy
///         v1.0.0-beta.3 singleton contracts. Once the contracts are deployed,
///         the migration is ready to be executed. The governance should in one
///         transaction pass the ownership of the OrangeKitSafeFactory proxy to
///         the migration contract and call the `migrate` function. As a result,
///         the migration should be executed and the ownership over the factory
///         should be returned back to the governance.
contract MigrationTo_1_0_0_beta_3 {
    bytes32 public constant SALT =
        keccak256("Well if this kit is not orange, I do not know what is...");

    /// @notice Address of the emergency upgrader that will receive the
    ///         ownership of the contracts once the upgrade is done.
    address public constant EMERGENCY_UPGRADER =
        0x98D8899c3030741925BE630C710A98B57F397C7a;

    /// @notice Address of the OrangeKitSafeFactory proxy contract, as deployed
    ///         in version v1.0.0-beta.2.
    address public constant ORANGE_KIT_SAFE_FACTORY_PROXY =
        0x7E80bd5A2E8Fca0B160254D43aC9f43AC2cC1052;

    /// @notice The address of the deployed BitcoinSafeOwner singleton contract,
    ///         version v1.0.0-beta.3.
    /// @dev Zero address before the contract is deployed.
    address public BITCOIN_SAFE_OWNER_SINGLETON;

    /// @notice The address of the deployed OrangeKitSafeFactory singleton
    ///         contract, version v1.0.0-beta.3.
    /// @dev Zero address before the contract is deployed.
    address public ORANGE_KIT_SAFE_FACTORY_SINGLETON;

    event BitcoinSafeOwnerSingletonDeployed(address bitcoinSafeOwnerSingleton);
    event OrangeKitSafeFactorySingletonDeployed(
        address orangeKitSafeFactorySingleton
    );

    error BitcoinSafeOwnerSingletonNotDeployed();
    error OrangeKitSafeFactorySingletonNotDeployed();
    error Create2Failed();
    error NotEmergencyUpgrader();

    function deploy() external {
        deployBitcoinSafeOwnerSingleton();
        deployOrangeKitSafeFactorySingleton();
    }

    function migrate() external {
        if (BITCOIN_SAFE_OWNER_SINGLETON == address(0)) {
            revert BitcoinSafeOwnerSingletonNotDeployed();
        }
        if (ORANGE_KIT_SAFE_FACTORY_SINGLETON == address(0)) {
            revert OrangeKitSafeFactorySingletonNotDeployed();
        }

        OrangeKitSafeFactory proxy = OrangeKitSafeFactory(
            ORANGE_KIT_SAFE_FACTORY_PROXY
        );

        proxy.upgradeSingleton(
            ORANGE_KIT_SAFE_FACTORY_SINGLETON,
            abi.encodeWithSignature("initialize()")
        );

        proxy.upgradeSafeOwnerSingleton(BITCOIN_SAFE_OWNER_SINGLETON);

        proxy.transferOwnership(EMERGENCY_UPGRADER);
    }

    /// @notice Deploys the BitcoinSafeOwner singleton contract. Can be called
    ///         by anyone.
    function deployBitcoinSafeOwnerSingleton() public {
        BITCOIN_SAFE_OWNER_SINGLETON = _deploy(
            abi.encodePacked(type(BitcoinSafeOwner).creationCode)
        );
        emit BitcoinSafeOwnerSingletonDeployed(BITCOIN_SAFE_OWNER_SINGLETON);
    }

    /// @notice Deploys the OrangeKitSafeFactory singleton contract. Can be
    ///         called by anyone.
    function deployOrangeKitSafeFactorySingleton() public {
        ORANGE_KIT_SAFE_FACTORY_SINGLETON = _deploy(
            abi.encodePacked(type(OrangeKitSafeFactory).creationCode)
        );
        emit OrangeKitSafeFactorySingletonDeployed(
            ORANGE_KIT_SAFE_FACTORY_SINGLETON
        );
    }

    /// @dev Deploys a contract with CREATE2.
    /// @param deploymentData Encoded deployment data.
    /// @return deployedContract Address of the deployed contract.
    function _deploy(
        bytes memory deploymentData
    ) internal returns (address deployedContract) {
        bytes32 salt = SALT;
        // solhint-disable-next-line no-inline-assembly
        assembly {
            deployedContract := create2(
                0x0,
                add(0x20, deploymentData),
                mload(deploymentData),
                salt
            )
        }
        if (address(deployedContract) == address(0)) {
            revert Create2Failed();
        }
    }

    /// @notice Function used in case of an emergency if the upgrade fails for
    ///         whatever reason and the ownership of the factory needs to be
    ///         claimed back. In normal circumstances this function should never
    ///         be used.
    function claimOwnershipBack() external {
        if (msg.sender != EMERGENCY_UPGRADER) {
            revert NotEmergencyUpgrader();
        }

        OrangeKitSafeFactory proxy = OrangeKitSafeFactory(
            ORANGE_KIT_SAFE_FACTORY_PROXY
        );
        proxy.transferOwnership(EMERGENCY_UPGRADER);
    }
}
