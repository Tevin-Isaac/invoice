import { Wallet } from "@rainbow-me/rainbowkit";
export type Balance = {
    confirmed: number;
    unconfirmed: number;
    total: number;
};
export type Signature = string;
export type BitcoinAddress = string;
export type BitcoinTxHash = string;
export type CreateWalletFn = () => Wallet;
export type ProviderSignature = string;
export type ProviderTxId = string;
export interface InjectedProvider {
    requestAccounts(): Promise<string[]>;
    getAccounts(): Promise<string[]>;
    getBalance(): Promise<Balance>;
    signMessage(message: string): Promise<ProviderSignature>;
    sendBitcoin(to: string, satoshis: number): Promise<ProviderTxId>;
    getPublicKey(): Promise<string>;
    disconnect?: () => Promise<void>;
}
export interface OrangeKitBitcoinWalletProvider {
    setProvider(_provider: InjectedProvider): void;
    signMessage(message: string): Promise<Signature>;
    sendBitcoin(to: BitcoinAddress, satoshis: number): Promise<BitcoinTxHash>;
    getAddress(): Promise<BitcoinAddress>;
    getBalance(): Promise<Balance>;
    getPublicKey(): Promise<string>;
    connect(): Promise<BitcoinAddress>;
    isInstalled(): boolean;
    disconnect(): Promise<void>;
}
export declare class OrangeKitBitcoinProvider implements OrangeKitBitcoinWalletProvider {
    #private;
    constructor(_provider: InjectedProvider);
    setProvider(_provider: InjectedProvider): void;
    disconnect(): Promise<void>;
    connect(): Promise<string>;
    isInstalled(): boolean;
    getAddress(): Promise<BitcoinAddress>;
    getBalance(): Promise<Balance>;
    signMessage(message: string): Promise<Signature>;
    sendBitcoin(to: BitcoinAddress, satoshis: number): Promise<BitcoinTxHash>;
    getPublicKey(): Promise<string>;
}
//# sourceMappingURL=bitcoin-wallet-provider.d.ts.map