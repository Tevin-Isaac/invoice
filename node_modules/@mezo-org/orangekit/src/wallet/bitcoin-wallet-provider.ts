import { BitcoinSignatureHelper } from "@mezo-org/orangekit-smart-account"
import { Wallet } from "@rainbow-me/rainbowkit"

export type Balance = {
  confirmed: number
  unconfirmed: number
  total: number
}

export type Signature = string

export type BitcoinAddress = string

export type BitcoinTxHash = string

export type CreateWalletFn = () => Wallet

export type ProviderSignature = string

export type ProviderTxId = string

export interface InjectedProvider {
  requestAccounts(): Promise<string[]>
  getAccounts(): Promise<string[]>
  getBalance(): Promise<Balance>
  signMessage(message: string): Promise<ProviderSignature>
  sendBitcoin(to: string, satoshis: number): Promise<ProviderTxId>
  getPublicKey(): Promise<string>
  disconnect?: () => Promise<void>
}

// Shared interface for Bitcoin wallets.
export interface OrangeKitBitcoinWalletProvider {
  setProvider(_provider: InjectedProvider): void

  signMessage(message: string): Promise<Signature>

  // TODO: define params and return type
  sendBitcoin(to: BitcoinAddress, satoshis: number): Promise<BitcoinTxHash>

  getAddress(): Promise<BitcoinAddress>

  getBalance(): Promise<Balance>

  getPublicKey(): Promise<string>

  connect(): Promise<BitcoinAddress>

  isInstalled(): boolean

  disconnect(): Promise<void>
}

export class OrangeKitBitcoinProvider
  implements OrangeKitBitcoinWalletProvider
{
  #provider: InjectedProvider

  constructor(_provider: InjectedProvider) {
    this.#provider = _provider
  }

  setProvider(_provider: InjectedProvider) {
    this.#provider = _provider
  }

  async disconnect(): Promise<void> {
    if (typeof this.#provider.disconnect === "function") {
      await this.#provider.disconnect()
    }
    return Promise.resolve()
  }

  async connect(): Promise<string> {
    const accounts = await this.#provider.requestAccounts()

    return accounts[0]
  }

  isInstalled(): boolean {
    return !!this.#provider
  }

  async getAddress(): Promise<BitcoinAddress> {
    const accounts = await this.#provider.getAccounts()

    return accounts[0]
  }

  async getBalance(): Promise<Balance> {
    const balance = await this.#provider.getBalance()

    return balance
  }

  async signMessage(message: string): Promise<Signature> {
    const signature = await this.#provider.signMessage(message)
    const [address] = await this.#provider.getAccounts()

    return BitcoinSignatureHelper.normalizeSignature(
      Buffer.from(signature, "base64"),
      address,
      await this.getPublicKey(),
    )
  }

  async sendBitcoin(
    to: BitcoinAddress,
    satoshis: number,
  ): Promise<BitcoinTxHash> {
    return this.#provider.sendBitcoin(to, satoshis)
  }

  async getPublicKey(): Promise<string> {
    return this.#provider.getPublicKey()
  }
}
