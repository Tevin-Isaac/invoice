/* eslint-disable @typescript-eslint/no-explicit-any */
import { getAddress, signMessage } from "sats-connect"
import XverseInjectedProvider from "./provider"

jest.mock("sats-connect", () => ({
  getAddress: jest.fn(),
  signMessage: jest.fn(),
  AddressPurpose: {
    Payment: "Payment",
  },
  BitcoinNetworkType: {
    Mainnet: "Mainnet",
  },
}))

describe("XverseInjectedProvider", () => {
  let provider: XverseInjectedProvider

  beforeEach(() => {
    provider = new XverseInjectedProvider()
    ;(getAddress as jest.Mock).mockClear()
    ;(signMessage as jest.Mock).mockClear()
  })

  it("requests accounts successfully", async () => {
    ;(getAddress as jest.Mock).mockImplementation((options: any) => {
      options.onFinish({ addresses: [{ address: "test-address" }] })
    })

    const result = await provider.requestAccounts()

    expect(result).toEqual(["test-address"])
    expect(getAddress).toHaveBeenCalled()
  })

  it("gets accounts successfully", async () => {
    ;(getAddress as jest.Mock).mockImplementation((options: any) => {
      options.onFinish({ addresses: [{ address: "test-address" }] })
    })

    const result = await provider.getAccounts()

    expect(result).toEqual(["test-address"])
    expect(getAddress).toHaveBeenCalled()
  })

  it("signs message successfully", async () => {
    ;(getAddress as jest.Mock).mockImplementation((options: any) => {
      options.onFinish({ addresses: [{ address: "test-address" }] })
    })
    ;(signMessage as jest.Mock).mockImplementation((options: any) => {
      options.onFinish("test-signature")
    })

    const result = await provider.signMessage("test-message")

    expect(result).toEqual("test-signature")
    expect(getAddress).toHaveBeenCalled()
    expect(signMessage).toHaveBeenCalled()
  })

  it("handles request cancellation", async () => {
    ;(getAddress as jest.Mock).mockImplementation((options: any) => {
      options.onCancel()
    })

    const result = await provider.requestAccounts()

    expect(result).toEqual([])
    expect(getAddress).toHaveBeenCalled()
  })

  it("handles get accounts cancellation", async () => {
    ;(getAddress as jest.Mock).mockImplementation((options: any) => {
      options.onCancel()
    })

    const result = await provider.getAccounts()

    expect(result).toEqual([])
    expect(getAddress).toHaveBeenCalled()
  })

  it("handles sign message cancellation", async () => {
    ;(getAddress as jest.Mock).mockImplementation((options: any) => {
      options.onFinish({ addresses: [{ address: "test-address" }] })
    })
    ;(signMessage as jest.Mock).mockImplementation((options: any) => {
      options.onCancel()
    })

    const result = await provider.signMessage("test-message")

    expect(result).toEqual("")
    expect(getAddress).toHaveBeenCalled()
    expect(signMessage).toHaveBeenCalled()
  })
})
