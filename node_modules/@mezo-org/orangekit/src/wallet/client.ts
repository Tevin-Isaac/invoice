import { Hex, WalletClient, createWalletClient, http } from "viem"
import { toAccount } from "viem/accounts"
import { OrangeKitSmartAccount } from "@mezo-org/orangekit-smart-account"
import { OrangeKitBitcoinWalletProvider } from "./bitcoin-wallet-provider"
import { mainnet, matsnetTestnetChain, sepolia } from "./chains"

export type OrangeKitClientConfig = {
  chainId: number
  bitcoinWalletProvider: OrangeKitBitcoinWalletProvider
  rpcUrl: string
  address: string
  orangeKitSmartAccount: OrangeKitSmartAccount
}

export type OrangeKitClient = WalletClient & {
  sendBitcoin: (to: string, satoshis: number) => Promise<string>
  sendTransaction: (to: string, value: number, data: string) => Promise<Hex>
}

const supportedChains = [mainnet, sepolia, matsnetTestnetChain]

export function createOrangeKitClient({
  address,
  bitcoinWalletProvider,
  rpcUrl,
  chainId,
  orangeKitSmartAccount,
}: OrangeKitClientConfig): OrangeKitClient {
  const account = toAccount({
    // @ts-expect-error we want to try return btc address
    address,
    async signMessage({ message }) {
      const messageToSign =
        typeof message === "string" ? message : message.raw.toString()

      const signedMessage =
        await bitcoinWalletProvider.signMessage(messageToSign)

      return signedMessage as Hex
    },
    // @ts-expect-error TODO fix this error.
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    async signTransaction() {
      // TODO: sign transaction here.
      const tx = {}

      return Promise.resolve(tx)
    },
    signTypedData() {
      throw new Error("Unsupported method")
    },
  })

  const chain = supportedChains.find((_chain) => _chain.id === chainId)

  if (!chain) throw new Error("Unsupported chain")

  return createWalletClient({
    chain,
    account,
    transport: http(rpcUrl),
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
  }).extend((client) => ({
    async sendBitcoin(to: string, satoshis: number) {
      const txHash = await bitcoinWalletProvider.sendBitcoin(to, satoshis)

      return txHash
    },
    async sendTransaction({ to, value, data }): Promise<Hex> {
      return (await orangeKitSmartAccount.sendTransaction(
        to ?? "",
        (value ?? 0n).toString(),
        data ?? "",
        await bitcoinWalletProvider.getAddress(),
        await bitcoinWalletProvider.getPublicKey(),
        (message) => bitcoinWalletProvider.signMessage(message),
      )) as Hex // cast to Hex to match return type of sendTransaction
    },
  }))
}
