import { OrangeKitSmartAccount } from "@mezo-org/orangekit-smart-account"
import {
  AbstractSigner,
  Provider,
  TransactionRequest,
  TransactionResponse,
} from "ethers"
import {
  Balance,
  OrangeKitBitcoinWalletProvider,
} from "./bitcoin-wallet-provider"

class OrangeKitEthersSigner extends AbstractSigner {
  static init(
    provider: Provider | null,
    ethAddress: string,
    bitcoinWallet: OrangeKitBitcoinWalletProvider,
    orangekitSmartAccount: OrangeKitSmartAccount,
  ) {
    return new OrangeKitEthersSigner(
      provider,
      ethAddress,
      bitcoinWallet,
      orangekitSmartAccount,
    )
  }

  #bitcoinWallet: OrangeKitBitcoinWalletProvider

  #address: string

  #orangekitSmartAccount: OrangeKitSmartAccount

  private constructor(
    provider: Provider | null,
    ethAddress: string,
    bitcoinWallet: OrangeKitBitcoinWalletProvider,
    orangekitSmartAccount: OrangeKitSmartAccount,
  ) {
    super(provider)
    this.#address = ethAddress
    this.#bitcoinWallet = bitcoinWallet
    this.#orangekitSmartAccount = orangekitSmartAccount
  }

  async signMessage(_message: string | Uint8Array): Promise<string> {
    return this.#bitcoinWallet.signMessage(_message.toString())
  }

  async sendBitcoin(address: string, amount: number): Promise<string> {
    return this.#bitcoinWallet.sendBitcoin(address, amount)
  }

  async getAddress() {
    return Promise.resolve(this.#address)
  }

  async getBalance(): Promise<Balance> {
    return Promise.resolve(this.#bitcoinWallet.getBalance())
  }

  async getBitcoinAddress() {
    return Promise.resolve(this.#bitcoinWallet.getAddress())
  }

  connect(provider: Provider | null): OrangeKitEthersSigner {
    return new OrangeKitEthersSigner(
      provider,
      this.#address,
      this.#bitcoinWallet,
      this.#orangekitSmartAccount,
    )
  }

  private async waitForTransactionResponse(
    hash: string,
    maxRetries: number = 30,
    delayMs: number = 1000,
  ): Promise<TransactionResponse> {
    let retries = 0

    while (retries < maxRetries) {
      const txResponse =
        // eslint-disable-next-line no-await-in-loop
        await this.#orangekitSmartAccount.provider.getTransaction(hash)

      if (txResponse) {
        return txResponse
      }

      // Wait for the given delay before we retry
      // eslint-disable-next-line no-await-in-loop
      await new Promise((resolve) => {
        setTimeout(resolve, delayMs)
      })

      retries += 1
    }

    throw new Error(`Transaction not found after ${maxRetries} retries.`)
  }

  async sendTransaction(
    transactionRequest: TransactionRequest,
    maxRetries?: number,
    delayMs?: number,
  ): Promise<TransactionResponse> {
    const hash = await this.#orangekitSmartAccount.sendTransaction(
      (transactionRequest.to as string) ?? "",
      (transactionRequest.value ?? 0n).toString(),
      transactionRequest.data ?? "",
      await this.#bitcoinWallet.getAddress(),
      await this.#bitcoinWallet.getPublicKey(),
      (message) => this.#bitcoinWallet.signMessage(message),
    )

    return this.waitForTransactionResponse(hash, maxRetries, delayMs)
  }

  // eslint-disable-next-line class-methods-use-this
  signTransaction(): Promise<string> {
    throw new Error("Unsupported method")
  }

  // eslint-disable-next-line class-methods-use-this
  signTypedData(): Promise<string> {
    throw new Error("Unsupported method")
  }

  // We must add this to be compatible with ethers v5 and tbtc-v2.ts lib.
  getNetwork() {
    return this.provider?.getNetwork()
  }

  // We must add this to be compatible with ethers v5 and tbtc-v2.ts lib.
  readonly _isSigner: boolean = true

  // We must add this to be compatible with ethers v5 and tbtc-v2.ts lib.
  // eslint-disable-next-line no-underscore-dangle
  _checkProvider() {
    if (!this.provider) throw new Error("Provider not available")
  }

  // We must add this to be compatible with ethers v5 and tbtc-v2.ts lib.
  async getChainId(): Promise<number> {
    // eslint-disable-next-line no-underscore-dangle
    this._checkProvider()

    const network = await this.provider!.getNetwork()

    return Number(network.chainId)
  }
}

// eslint-disable-next-line import/prefer-default-export
export { OrangeKitEthersSigner }
