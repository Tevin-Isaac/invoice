import { useEffect, useState } from "react"
import { useAccount } from "wagmi"
import { Balance } from "../wallet/bitcoin-wallet-provider"
import { CreateOrangeKitConnectorFn } from "../wallet/connector"

type OrangeKitConnector = ReturnType<CreateOrangeKitConnectorFn>

function useBitcoinAccount(): {
  btcAddress: string | undefined
  btcBalance: Balance | undefined
} {
  const { connector } = useAccount()
  const [btcAddress, setBtcAddress] = useState<string | undefined>(undefined)
  const [btcBalance, setBtcBalance] = useState<Balance | undefined>(undefined)

  useEffect(() => {
    const fetchBtcBalance = async () => {
      const orangeKitConnector = connector as unknown as OrangeKitConnector
      if (
        !orangeKitConnector ||
        // Workaround to get rid of `getBitcoinProvider` is not a function error
        // when refreshing a page with previously connected connector.
        typeof orangeKitConnector.getBitcoinProvider !== "function"
      ) {
        setBtcAddress(undefined)
        setBtcBalance(undefined)
        return
      }
      const provider = orangeKitConnector.getBitcoinProvider()

      const address = await provider.getAddress()

      const balance = await provider.getBalance()

      setBtcAddress(address)
      setBtcBalance(balance)
    }

    fetchBtcBalance()
  }, [connector, setBtcBalance])

  return { btcAddress, btcBalance }
}

export { useBitcoinAccount }
