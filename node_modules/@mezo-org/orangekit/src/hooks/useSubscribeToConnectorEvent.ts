import { useEffect } from "react"
import { Config, ConnectorEventMap, useConnectors } from "wagmi"

export type ConnectorEvents = keyof ConnectorEventMap

export type EventCallback<Event extends ConnectorEvents> = (
  ...parameters: ConnectorEventMap[Event] extends [never]
    ? [{ uid: string }]
    : [data: ConnectorEventMap[Event] & { uid: string }]
) => void

export function useSubscribeToConnectorEvent<Event extends ConnectorEvents>(
  config: Config,
  connectorId: string,
  eventName: Event,
  callback: EventCallback<Event>,
) {
  const connectors = useConnectors({ config })

  const connector = connectors.find((c) => c.id === connectorId)

  useEffect(() => {
    if (!connector) {
      return undefined
    }

    connector.emitter.on(eventName, callback)

    return () => {
      connector.emitter.off(eventName, callback)
    }
  }, [connector, callback, connectorId, eventName])
}
