import { useCallback } from "react"
import { useAccount, useChainId } from "wagmi"
import { Address, Hash, Hex } from "viem"
import { getChainById } from "@mezo-org/orangekit-smart-account"
import { OrangeKitConnector } from "../wallet/connector"
import { OrangeKitClient } from "../wallet/client"

function useSendTransaction() {
  const { connector } = useAccount()
  const chainId = useChainId()

  const sendTransaction = useCallback(
    async (
      to: Address,
      value: bigint,
      data: Hex,
    ): Promise<{ hash: Hash } | undefined> => {
      const orangeKitConnector = connector as unknown as OrangeKitConnector
      if (
        !orangeKitConnector ||
        typeof orangeKitConnector.getClient !== "function"
      )
        return undefined

      const chain = getChainById(chainId)

      if (!chain) throw new Error(`Unsupported chain id [${chainId}]`)

      const client = (await orangeKitConnector.getClient()) as OrangeKitClient

      if (!client.account)
        throw new Error("Account could not be found in the OrangeKitClient")

      const transactionHash = await client.sendTransaction({
        account: client.account,
        to,
        value,
        data,
        chain,
      })

      return { hash: transactionHash }
    },
    [connector, chainId],
  )

  return { sendTransaction }
}

export { useSendTransaction }
