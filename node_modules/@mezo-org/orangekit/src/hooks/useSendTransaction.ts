import { useCallback } from "react"
import { useAccount, useChainId } from "wagmi"
import { Provider } from "ethers"
import { TransactionResponse } from "ethers"
import { CreateOrangeKitConnectorFn } from "../wallet/connector"
import { OrangeKitEthersSigner } from "../wallet/ethers-signer"

type OrangeKitConnector = ReturnType<CreateOrangeKitConnectorFn>

function useSendTransaction() {
  const { connector } = useAccount()
  const chainId = useChainId()

  const sendTransaction = useCallback(
    async (
      to: string,
      value: bigint,
      data: string,
    ): Promise<TransactionResponse | undefined> => {
      const orangeKitConnector = connector as unknown as OrangeKitConnector
      if (
        !orangeKitConnector ||
        typeof orangeKitConnector.getClient !== "function"
      )
        return undefined

      const ethProvider = await orangeKitConnector.getProvider()

      const signer: OrangeKitEthersSigner = orangeKitConnector.toEthersSigner(
        ethProvider as unknown as Provider,
      )

      const result = await signer.sendTransaction({
        to,
        value,
        data,
        chainId,
      })

      return result
    },
    [connector, chainId],
  )

  return { sendTransaction }
}

export { useSendTransaction }
